"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const utils_1 = require("../../utils");
/** This module manages polls. */
async function default_1(client) {
    await endPolls(client);
}
exports.default = default_1;
async function endPolls(client) {
    const guilds = client.guilds.cache.toJSON();
    for (const guild of guilds) {
        const db = guild.database.polls;
        const pollsData = await db.fetchMany({ duration: { $lte: Date.now() } });
        for (const poll of pollsData.toJSON()) {
            client.emit('debug', 'Running event "modules/polls#endPoll".');
            await handlePoll(poll, client, guild);
        }
        await Promise.all(pollsData.map(poll => db.delete(poll)));
    }
    setTimeout(async () => await endPolls(client), 1000);
}
async function handlePoll(poll, client, guild) {
    const channel = client.channels.resolve(poll.channel);
    if (!channel || channel.type === discord_js_1.ChannelType.GuildStageVoice)
        return;
    const message = await channel.messages.fetch(poll.message).catch(() => null);
    if (!message)
        return;
    const reactions = message.reactions.cache.filter(({ emoji }) => {
        const query = emoji.id || emoji.name;
        return query && poll.emojis.includes(query);
    }).toJSON();
    const results = [];
    for (const reaction of reactions) {
        const votes = reaction.count - 1;
        const emoji = reaction.emoji.toString();
        results.push({ votes, emoji });
    }
    const winners = results.sort((a, b) => b.votes - a.votes).filter((d, _, arr) => arr[0].votes === d.votes);
    const winner = winners.length === 1
        ? `The winner was the choice ${winners[0].emoji} with a total of \`${winners[0].votes}\` votes!` : null;
    const draw = winners.length > 1
        ? `It seems like there was a draw between these choices: ${winners.map(d => d.emoji).join(', ')}` : null;
    const noVotes = results.filter(d => d.votes === 0).length === results.length
        ? 'It seems like no one voted on this poll...' : null;
    const pollEmbed = new discord_js_1.EmbedBuilder()
        .setColor(utils_1.pixelColor)
        .setAuthor({
        name: 'The poll has ended!',
        iconURL: guild.iconURL({ forceStatic: false }) ?? undefined,
        url: message.url,
    })
        .setDescription(winner || noVotes || draw)
        .setTimestamp();
    if (!noVotes) {
        pollEmbed.addFields({
            name: 'These are the full results:',
            value: results.map(d => `**>** Choice ${d.emoji} with \`${d.votes}\` votes.`).join('\n'),
        });
    }
    await message.reply({ embeds: [pollEmbed] });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9taXNjL3BvbGxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQThFO0FBRTlFLHVDQUF5QztBQUV6QyxpQ0FBaUM7QUFDbEIsS0FBSyxvQkFBVyxNQUE0QjtJQUN2RCxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixDQUFDO0FBRkQsNEJBRUM7QUFFRCxLQUFLLFVBQVUsUUFBUSxDQUFDLE1BQTRCO0lBQ2hELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVDLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1FBQ3hCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBRWhDLE1BQU0sU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekUsS0FBSyxNQUFNLElBQUksSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsd0NBQXdDLENBQUMsQ0FBQztZQUMvRCxNQUFNLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO1FBRUQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3RDtJQUVELFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FB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